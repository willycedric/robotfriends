{"version":3,"sources":["reducers.js","actions.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","containers/App.js","components/RobotDetails.js","containers/RobotDetailContainer.js","components/ErrorBoundry.js","routes.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","requestRobots","dispatch","type","fetch","then","response","json","data","payload","catch","Card","_ref","name","email","id","react_default","a","createElement","Link","to","concat","className","alt","src","toLowerCase","replace","CardList","map","_ref2","components_Card","key","SearchBox","searchChange","placeholder","aria-label","onChange","Scroll","props","style","overflowY","border","height","children","Header","nextProps","nextState","Component","App","this","onRequestRobots","_this$props","onSearchChange","filteredRobot","filter","robot","toLocaleLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_CardList","connect","state","searchRobots","event","target","value","RobotDetails","length","_props$robots$props$i","index","onClick","onRefresh","location","pathname","ErrorBoundry","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","hasError","info","console","log","setState","routes","BrowserRouter","Switch","components_ErrorBoundry","Route","exact","path","component","Boolean","window","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","undefined","action","assign","initialState","localStorage","JSON","parse","applyMiddleware","thunkMiddleware","createStore","store","subscribe","stringify","getState","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be1026af.chunk.js","sourcesContent":["import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n/**\n * With a reducer always return the state if it doesn't match any of the criteria.\n */\nconst initialStateSearch = {\n    searchField: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false });\n        default:\n            return state;\n\n    }\n}\n","import {CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text)=>({\n    type:CHANGE_SEARCH_FIELD,\n    payload:text\n})\n\nexport const requestRobots = () => (dispatch)=> {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then( data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}));\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING= 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS= 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED= 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport { Link } from 'react-router-dom';\n//Receiving the props and destructuring the object\nconst Card = ({ name, email, id }) => {\n    return (\n        <Link to={`robot/${id}`}>\n            <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n                <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n                <div id={name.toLowerCase().replace(/\\s/g, '') + '-' + id}>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        </Link>\n    );\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\nconst CardList = ({ robots }) => {    \n    return (\n        <div>\n            {\n                robots.map(({ id, name, email }) => {\n                    return (\n                        <Card\n                            id={id}\n                            name={name}\n                            email={email}\n                            key={id} />\n                    );\n                })\n            }\n\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox = ({ searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                id='search-friends'\n                placeholder='search robot'\n                aria-label='search robots'\n                onChange={searchChange} />\n        </div>\n\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return (\n        <div style={{overflowY:'scroll', border:'2px solid black', height:'800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n//import CounterButton from './CounterButton'\nclass Header extends Component {\n\n    shouldComponentUpdate(nextProps, nextState){\n      \n        return  false;\n    }\n    render() {         \n        return (\n            <div>               \n                <h1 className='f1'>RobotFriends</h1>\n                {/* <CounterButton color={'red'}/> */}\n            </div>\n                \n          )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\n// import RobotDetails from './RobotDetails';\n// import ErrorBoundry from '../components/ErrorBoundry';\n//import { robots as data } from './../robots';\nimport './App.css';\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    };\n}\nclass App extends Component {\n\n    componentWillMount() {\n\n        this.props.onRequestRobots();\n    }\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props\n        const filteredRobot = robots.filter(robot => robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase()))\n        return isPending ? (<div className='tc'>\n            <h1>Loading ...</h1>\n        </div>) : (\n                <div className='tc'>\n                    <div>\n                        <Header />\n                        <SearchBox searchChange={onSearchChange} />\n                        <Scroll>\n                            <CardList robots={filteredRobot} />\n                        </Scroll>\n                    </div>\n                </div>\n            );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\n\nconst RobotDetails = (props) => {\n    if(props.robots.length>0){\n        const {id, email, name} = props.robots[props.index];\n        return (\n            <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n                    <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n                    <div id={name.toLowerCase().replace(/\\s/g, '') + '-' + id}>\n                        <h2>{name}</h2>\n                        <p>{email}</p>\n                    </div>\n            </div>\n          );\n    }else{\n        return (\n            <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n                   <button onClick={props.onRefresh}>Refresh</button>\n            </div>\n          );\n    }\n    \n}\n \nexport default RobotDetails;","import { connect } from 'react-redux';\nimport { requestRobots } from '../actions';\nimport RobotDetails from '../components/RobotDetails';\nconst mapStateToProps = (state, props)=>{\n    \n    return {\n        robots:state.requestRobots.robots,\n        index:props.location.pathname.replace('/robot/','')-1\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onRefresh(){\n            dispatch(requestRobots())\n        } \n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RobotDetails);\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        };\n    }\n    componentDidCatch(error, info){\n        console.log(error, info);\n        this.setState({\n            hasError:true\n        })\n    }\nrender() {\n        if (this.state.hasError) {\n            return (\n                <div className='tc'>\n                    <h1>Oooops. That is not good!</h1>\n                </div>\n            );\n        }else{\n            return this.props.children;\n        }\n    }\n}\n\nexport default ErrorBoundry;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport App  from './containers/App';\nimport RobotDetails from './containers/RobotDetailContainer';\nimport ErrorBoundry from './components/ErrorBoundry';\n\nconst routes = (\n    \n        <Router>\n            <Switch>\n                <ErrorBoundry>\n                    <Route exact path='/' component={App}/>\n                    {/* <Route exact path='/robot/:id' render={(props) => {\n                        let id = parseInt(props.location.pathname.replace('/robot/', '')) - 1;                     \n                        return <RobotDetails id={id} />\n                    }} /> */}\n                    <Route exact path='/robot/:id' component={RobotDetails}                                            \n                       \n                    />\n                </ErrorBoundry>\n            </Switch>\n        </Router>\n    \n)\n\nexport default routes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from '../src/reducers'\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport routes from './routes';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst initialState = (localStorage[\"redux-store\"]) ?\n    JSON.parse(localStorage[\"redux-store\"]) :\n    {}\napplyMiddleware(thunkMiddleware,logger)(createStore)(rootReducer, initialState)\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\nconst store =applyMiddleware(thunkMiddleware,logger)(createStore)(rootReducer, initialState)\nconst saveState = () => \n    localStorage[\"redux-store\"] = JSON.stringify(store.getState())\nstore.subscribe(saveState)\nReactDOM.render(\n    \n        <Provider  store={store}>\n           {routes}\n          \n        </Provider>   \n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\nwindow.store = store"],"sourceRoot":""}