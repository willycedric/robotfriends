{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","toLowerCase","replace","CardList","map","_ref2","components_Card","key","SearchBox","searchChange","type","placeholder","aria-label","onChange","Scroll","props","style","overflowY","border","height","children","Header","nextProps","nextState","console","log","Component","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","App","onRequestRobots","_this$props","onSearchChange","filteredRobot","filter","robot","toLocaleLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78d40a37.chunk.js","sourcesContent":["import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n/**\r\n * With a reducer always return the state if it doesn't match any of the criteria.\r\n */\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending:false,\r\n    robots:[],\r\n    error:''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending:false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending:false});\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}","import React from 'react';\r\n\r\n//Receiving the props and destructuring the object\r\nconst Card = ({name, email, id}) => {  \r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div id={name.toLowerCase().replace(/\\s/g,'')+'-'+id}>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({ robots }) => {    \r\n    return (\r\n        <div>\r\n            {\r\n                robots.map(({ id, name, email }) => {\r\n                    return (\r\n                        <Card\r\n                            id={id}\r\n                            name={name}\r\n                            email={email}\r\n                            key={id} />\r\n                    );\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({ searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                id='search-friends'\r\n                placeholder='search robot'\r\n                aria-label='search robots'\r\n                onChange={searchChange} />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY:'scroll', border:'2px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\n//import CounterButton from './CounterButton'\nclass Header extends Component {\n\n    shouldComponentUpdate(nextProps, nextState){\n      \n        return  false;\n    }\n    render() {         \n        console.log('HEADER');\n        return (\n            <div>               \n                <h1 className='f1'>RobotFriends</h1>\n                {/* <CounterButton color={'red'}/> */}\n            </div>\n                \n          )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n    }\r\n    componentDidCatch(error, info){\r\n        console.log(error, info);\r\n        this.setState({\r\n            hasError:true\r\n        })\r\n    }\r\nrender() {\r\n        if (this.state.hasError) {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1>Oooops. That is not good!</h1>\r\n                </div>\r\n            );\r\n        }else{\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect} from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        searchField:state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error:state.requestRobots.error\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots:()=>dispatch(requestRobots())\r\n    };\r\n}\r\nclass App extends Component {\r\n\r\n   componentDidMount() {\r\n       \r\n        this.props.onRequestRobots();\r\n    }\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props\r\n        const filteredRobot = robots.filter(robot => robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase()))\r\n        return isPending ? (<div className='tc'>\r\n            <h1>Loading ...</h1>\r\n        </div>) : (\r\n                <div className='tc'>\r\n                   <Header />\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobot} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text)=>({\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch)=> {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then( data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING= 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS= 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED= 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from '../src/reducers'\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\nReactDOM.render(\n    \n        <Provider  store={store}>\n            <App />\n        </Provider>   \n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}